fslswapdim  srr_template_masked.nii.gz  -x y -z srr_template_masked_ro.nii.gz
#Apres un test on peut observe que cette commande fslswapdim change la direction de l'image, dans ce cas ici, elle tourne l'image à 180 sur axe x et axe z 
fslcpgeom srr_template_masked.nii.gz srr_template_masked_ro.nii.gz 
#Apres teste, on peut noter qu'il n'y a pas eu de changement mais que les propriètés de l'images sont copiés d'une image à une autre,notamment la taille des voxels

antsRegistrationSyN.sh -d 3 -f srr_template_masked_ro.nii.gz -m sub-1018_ses-1181_acq-haste_rec-nesvor_desc-aligned_T2w.nii.gz  -o sub_2_temp_ro_r -t r
#Apres test de cette operation de recalage avec ants, on note que d fait reference à la dimension, f est suivis par l'image fixe et m est suivi de l'image qu'on cherche à recaler sur la premiere, Un recalage Syn est un recalage par normalisation symetric, elle n'a pas de limite fixe sur les degrés de liberté, elle est non linéaire, il y a une grande fléxibilité et une régularisations des déformations (donc haute précision), pour finir en o nous obtenons la déformation qui a été necessaire pour réaliser le recalage 
#Cette operations nous permet d'obtenir la transformation nécessaire pour recaler une image mobile sur une image fixe, ainsi cette fonction nous donne en SORTIE : TRANSFORMATION À RÉALISER PAR LE APPLYTRANSFORMS qui suit.
#On determine la tranf necessaire par rapport au template_masked retourné

antsApplyTransforms -d 3 -i STA31_all_reg_LR_dilM.nii.gz -r srr_template_masked.nii.gz -o STA31_all_reg_LR_dilM_rl.nii.gz -n NearestNeighbor
#Cette commande permet de faire un redimensionnement de l'image donnée en -i par rapport à l'image reference donnée en -r , on obtient en sorti -o l'image mise à niveau par rapport à l'image -r


fslswapdim  STA31_all_reg_LR_dilM_rl.nii.gz  -x y -z STA31_all_reg_LR_dilM_rl_ro.nii.gz
fslcpgeom  srr_template_masked_ro.nii.gz STA31_all_reg_LR_dilM_rl_ro.nii.gz 

#On reapplique les deux opérations ci dessus pour retourner l'image (image dont on connait lateralité)
antsApplyTransforms -d 3 -i STA31_all_reg_LR_dilM_rl_ro.nii.gz  -o sub-1018_ses-1181_acq-haste_rec-nesvor_T2w_STA31_seg_LR_hemi.nii.gz -r sub-1018_ses-1181_acq-haste_rec-nesvor_desc-aligned_T2w.nii.gz -t [sub_2_temp_ro_r0GenericAffine.mat,1] -n NearestNeighbor
#Nous avons ici l'operations qui permet de récaler l'image dont on cherche la latéralité ("sub-1018.....desc_aligned"dans -r ), on le recalant surl 'image dont on connait la lateralité ("STA31.....")

fsleyes sub-1018_ses-1181_acq-haste_rec-nesvor_desc-aligned_T2w.nii.gz sub-1018_ses-1181_acq-haste_rec-nesvor_T2w_STA31_seg_LR_hemi.nii.gz


fslmaths  sub-1018_ses-1181_acq-haste_rec-nesvor_T2w_STA31_seg_LR_hemi.nii.gz -thr 2 -mul 5  sub-1018_ses-1181_acq-haste_rec-nesvor_T2w_STA31_seg_L_only_x10.nii.gz -odt short
#On realise un seuillage thr = 2 et une multiplication mul = 5 sur l'un des deux hemispheres grace à une image_segmenté de l'hemisphere gauche L 
fslmaths sub-1018_ses-1181_acq-haste_rec-nesvor_T2w_STA31_seg_L_only_x10.nii.gz -add sub-1018_ses-1181_acq-haste_rec-nesvor_desc-aligned_segmentation.nii.gz sub-1018_ses-1181_acq-haste_rec-nesvor_desc-aligned_segmentation_LR.nii.gz
#On additionne l'image avec hemisphere gauche réhausser, l'image correctement recaler (preservant la lateralité), on obtient en sortie une image ou se distingue les deux hemispheres, c'est donc une segmentation de notre sujet STA_31 qui preserve la lateralité
